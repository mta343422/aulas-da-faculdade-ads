# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1drIYsztp7GqOKLyfesX0ye2JobAWX1ry
"""

def divide(x, y):
    assert y != 0, "Divisão por zero!"
    return x / y

result = divide(6, 2)
print(result)

def calcular_media(notas):
    assert len(notas) > 0, "a lista de notas não pode estar vazia"
    soma = sum(notas)
    media = soma / len(notas)
    return media

# exemplo 1: lista de notas vazia
notas_vazias = []
media = calcular_media(notas_vazias) #isso lançará um AssertionError

#exemplo 2: lista de notas valida
notas_validas = [7.5, 8, 9.5, 6]
media = calcular_media(notas_validas)
print(media)

import doctest
def square(x):
    """
    Retorna o quadrado de um numero.

    Exemplos:
    >>> square(3)
    9
    >>> square(-2)
    4
    >>> square(0)
    0
    """
    return x * x
doctest.testmod()

import unittest

def add(a, b):
    return a + b

class TestAdd(unittest.TestCase):
    def test_add_positive_numbers(self):
        self.assertEqual(add(2, 3), 5)

    def test_add_negative_numbers(self):
        self.assertEqual(add(-2, -3), -5)

if __name__ == '__main__':
    import unittest
    unittest.main(argv=['fist-arg-is-ignored'], exit=False)
    print("Os testes Foram executados com sucesso!")

#assert
def sum_numbers(numbers):
    assert sum([1, 2, 3, 4]) == 10
    assert sum([-1, 0, 1]) == 0
    assert sum([]) == 0
    return sum(numbers)
test = sum_numbers([1, 2, 3, 5])
print(test)

#doctest
def sum_numbers(numbers):
    """
    Soma os numeros em uma lista.

    Exemplos:
    >>> sum_numbers([1, 2, 3, 4])
    10
    >>> sum_numbers([-1, 0, 1])
    3
    >>> sum_numbers([])
    0
    """
    return sum(numbers)

if __name__ == "__main__":
    import doctest
    doctest.testmod()

#unittest
import unittest
def sum_numbers(numbers):
    return sum(numbers)

class TestSumNumbers(unittest.TestCase):
    def test_sum_numbers_positive(self):
        self.assertEqual(sum_numbers([1, 2, 3, 4]), 10)

    def test_sum_numbers_mixed(self):
        self.assertEqual(sum_numbers([-1, 0, 1]), 0)

if __name__ == '__main__':
    unittest.main(argv=['first-arg-is-ignored'], exit=False)